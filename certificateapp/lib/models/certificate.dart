import 'package:cloud_firestore/cloud_firestore.dart';

class Certificate {
  final String? id;
  final String certId; // Auto-generated unique certificate ID
  final String certName;
  final String issuer;
  final String recipientName;
  final String certificateType;
  final DateTime issueDate;
  final DateTime? expiryDate;
  final String? description;
  final String? additionalInfo;
  final String? filePath; // For uploaded PDF files
  final String? fileUrl; // Firebase Storage URL
  final String? fileName;
  final double? fileSize;
  final String? fileType;
  final bool
      isAutoGenerated; // Whether certificate was auto-generated or manual upload
  final String createdBy; // User ID who created the certificate
  final String createdByEmail; // Email of the creator
  final DateTime createdAt;
  final DateTime updatedAt;
  final String status; // 'active', 'expired', 'revoked', 'pending'
  final String? signature; // Digital signature or approval signature
  final Map<String, dynamic>? metadata; // Additional flexible data

  Certificate({
    this.id,
    required this.certId,
    required this.certName,
    required this.issuer,
    required this.recipientName,
    required this.certificateType,
    required this.issueDate,
    this.expiryDate,
    this.description,
    this.additionalInfo,
    this.filePath,
    this.fileUrl,
    this.fileName,
    this.fileSize,
    this.fileType,
    required this.isAutoGenerated,
    required this.createdBy,
    required this.createdByEmail,
    required this.createdAt,
    required this.updatedAt,
    required this.status,
    this.signature,
    this.metadata,
  });

  Certificate copyWith({
    String? id,
    String? certId,
    String? certName,
    String? issuer,
    String? recipientName,
    String? certificateType,
    DateTime? issueDate,
    DateTime? expiryDate,
    String? description,
    String? additionalInfo,
    String? filePath,
    String? fileUrl,
    String? fileName,
    double? fileSize,
    String? fileType,
    bool? isAutoGenerated,
    String? createdBy,
    String? createdByEmail,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? status,
    String? signature,
    Map<String, dynamic>? metadata,
  }) {
    return Certificate(
      id: id ?? this.id,
      certId: certId ?? this.certId,
      certName: certName ?? this.certName,
      issuer: issuer ?? this.issuer,
      recipientName: recipientName ?? this.recipientName,
      certificateType: certificateType ?? this.certificateType,
      issueDate: issueDate ?? this.issueDate,
      expiryDate: expiryDate ?? this.expiryDate,
      description: description ?? this.description,
      additionalInfo: additionalInfo ?? this.additionalInfo,
      filePath: filePath ?? this.filePath,
      fileUrl: fileUrl ?? this.fileUrl,
      fileName: fileName ?? this.fileName,
      fileSize: fileSize ?? this.fileSize,
      fileType: fileType ?? this.fileType,
      isAutoGenerated: isAutoGenerated ?? this.isAutoGenerated,
      createdBy: createdBy ?? this.createdBy,
      createdByEmail: createdByEmail ?? this.createdByEmail,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      status: status ?? this.status,
      signature: signature ?? this.signature,
      metadata: metadata ?? this.metadata,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'certId': certId,
      'certName': certName,
      'issuer': issuer,
      'recipientName': recipientName,
      'certificateType': certificateType,
      'issueDate': Timestamp.fromDate(issueDate),
      'expiryDate': expiryDate != null ? Timestamp.fromDate(expiryDate!) : null,
      'description': description,
      'additionalInfo': additionalInfo,
      'filePath': filePath,
      'fileUrl': fileUrl,
      'fileName': fileName,
      'fileSize': fileSize,
      'fileType': fileType,
      'isAutoGenerated': isAutoGenerated,
      'createdBy': createdBy,
      'createdByEmail': createdByEmail,
      'createdAt': Timestamp.fromDate(createdAt),
      'updatedAt': Timestamp.fromDate(updatedAt),
      'status': status,
      'signature': signature,
      'metadata': metadata,
    };
  }

  factory Certificate.fromMap(Map<String, dynamic> map, {String? id}) {
    return Certificate(
      id: id,
      certId: map['certId'] ?? '',
      certName: map['certName'] ?? '',
      issuer: map['issuer'] ?? '',
      recipientName: map['recipientName'] ?? '',
      certificateType: map['certificateType'] ?? '',
      issueDate: (map['issueDate'] as Timestamp).toDate(),
      expiryDate: map['expiryDate'] != null
          ? (map['expiryDate'] as Timestamp).toDate()
          : null,
      description: map['description'],
      additionalInfo: map['additionalInfo'],
      filePath: map['filePath'],
      fileUrl: map['fileUrl'],
      fileName: map['fileName'],
      fileSize: map['fileSize']?.toDouble(),
      fileType: map['fileType'],
      isAutoGenerated: map['isAutoGenerated'] ?? false,
      createdBy: map['createdBy'] ?? '',
      createdByEmail: map['createdByEmail'] ?? '',
      createdAt: (map['createdAt'] as Timestamp).toDate(),
      updatedAt: (map['updatedAt'] as Timestamp).toDate(),
      status: map['status'] ?? 'active',
      signature: map['signature'],
      metadata: map['metadata'] != null
          ? Map<String, dynamic>.from(map['metadata'])
          : null,
    );
  }

  // Helper methods
  bool get isExpired {
    if (expiryDate == null) return false;
    return DateTime.now().isAfter(expiryDate!);
  }

  bool get isActive {
    return status == 'active' && !isExpired;
  }

  String get formattedFileSize {
    if (fileSize == null) return 'Unknown';
    if (fileSize! < 1024) {
      return '${fileSize!.toStringAsFixed(1)} B';
    } else if (fileSize! < 1024 * 1024) {
      return '${(fileSize! / 1024).toStringAsFixed(1)} KB';
    } else {
      return '${(fileSize! / (1024 * 1024)).toStringAsFixed(1)} MB';
    }
  }

  String get formattedIssueDate {
    return '${issueDate.day}/${issueDate.month}/${issueDate.year}';
  }

  String? get formattedExpiryDate {
    if (expiryDate == null) return null;
    return '${expiryDate!.day}/${expiryDate!.month}/${expiryDate!.year}';
  }

  // Generate a readable certificate ID
  static String generateCertId() {
    final now = DateTime.now();
    final year = now.year.toString().substring(2); // Last 2 digits
    final month = now.month.toString().padLeft(2, '0');
    final day = now.day.toString().padLeft(2, '0');
    final random =
        (1000 + (DateTime.now().millisecondsSinceEpoch % 9000)).toString();
    return 'CERT-$year$month$day-$random';
  }
}
