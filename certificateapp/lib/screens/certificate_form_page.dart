import 'package:flutter/material.dart';
import 'package:file_picker/file_picker.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
import '../services/certificate_service.dart';
import '../models/certificate.dart';
import 'package:read_pdf_text/read_pdf_text.dart';

class CertificateFormPage extends StatefulWidget {
  const CertificateFormPage({super.key});

  @override
  State<CertificateFormPage> createState() => _CertificateFormPageState();
}

class _CertificateFormPageState extends State<CertificateFormPage> {
  final _formKey = GlobalKey<FormState>();
  final _certNameController = TextEditingController();
  final _nameController = TextEditingController();
  final _issuerController = TextEditingController();
  final _recipientController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _additionalInfoController = TextEditingController();
  final _signatureController = TextEditingController();

  final CertificateService _certificateService = CertificateService();

  DateTime? _issueDate;
  DateTime? _expiryDate;
  String? _selectedType;
  String? _certificateId;
  File? _selectedFile;
  String? _filePath;
  bool _isAutoGenerated = true;
  bool _isSaving = false;
  bool _isUploading = false;

  final List<String> _certificateTypes = [
    'Academic',
    'Medical',
    'Training',
    'Professional',
    'Achievement',
    'Certification',
    'License',
    'Award',
    'Completion',
    'Other',
  ];

  @override
  void initState() {
    super.initState();
    _generateCertificateId();
    _issueDate = DateTime.now();
  }

  void _generateCertificateId() {
    setState(() {
      _certificateId = Certificate.generateCertId();
    });
  }

  Future<void> _pickFile() async {
    setState(() => _isUploading = true);
    try {
      final result = await FilePicker.platform.pickFiles(
        type: FileType.custom,
        allowedExtensions: ['pdf', 'doc', 'docx'],
      );
      if (result != null && result.files.isNotEmpty) {
        final path = result.files.single.path;
        if (path == null) {
          throw Exception('File path is null. Cannot upload.');
        }
        final file = File(path);
        print('FilePicker selected file path: $path');
        print('File exists: ${file.existsSync()}');
        if (!file.existsSync()) {
          throw Exception('Selected file does not exist.');
        }
        setState(() {
          _filePath = result.files.single.name;
          _selectedFile = File(result.files.single.path!);
          _selectedFile = file;
        });
        // If PDF, extract text and autofill fields
        if (_filePath != null && _filePath!.toLowerCase().endsWith('.pdf')) {
          try {
            String text = await ReadPdfText.getPDFtext(_selectedFile!.path);
            _autofillFromPdfText(text);
          } catch (e) {
            if (mounted) {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text('Failed to extract PDF text: $e')),
              );
            }
          }
        }
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error picking file: $e')),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isUploading = false);
      }
    }
  }

  Future<void> _pickImage() async {
    setState(() => _isUploading = true);
    try {
      final pickedFile =
          await ImagePicker().pickImage(source: ImageSource.gallery);
      if (pickedFile != null) {
        final file = File(pickedFile.path);
        print('ImagePicker selected file path: ${pickedFile.path}');
        print('File exists: ${file.existsSync()}');
        if (!file.existsSync()) {
          throw Exception('Selected image does not exist.');
        }
        setState(() {
          _selectedFile = file;
        });
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error picking image: $e')),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isUploading = false);
      }
    }
  }

  void _autofillFromPdfText(String text) {
    // Simple regex-based extraction for fields like 'Certificate Name:', 'Issuer:', etc.
    String? getField(String label) {
      final regex = RegExp('$label\s*:\s*(.*)', caseSensitive: false);
      final match = regex.firstMatch(text);
      return match != null ? match.group(1)?.trim() : null;
    }

    final certName = getField('Certificate Name') ?? getField('Certificate');
    final issuer = getField('Issuer');
    final recipient = getField('Recipient');
    final type = getField('Type');
    final notes = getField('Notes');
    final issueDate = getField('Issue Date');
    final expiryDate = getField('Expiry Date');

    setState(() {
      if (certName != null && certName.isNotEmpty)
        _nameController.text = certName;
      if (issuer != null && issuer.isNotEmpty) _issuerController.text = issuer;
      if (recipient != null && recipient.isNotEmpty)
        _recipientController.text = recipient;
      if (type != null && type.isNotEmpty && _certificateTypes.contains(type))
        _selectedType = type;
      if (notes != null && notes.isNotEmpty)
        _descriptionController.text = notes;
      if (issueDate != null && issueDate.isNotEmpty) {
        final parsed = DateTime.tryParse(issueDate);
        if (parsed != null) _issueDate = parsed;
      }
      if (expiryDate != null && expiryDate.isNotEmpty) {
        final parsed = DateTime.tryParse(expiryDate);
        if (parsed != null) _expiryDate = parsed;
      }
    });
  }

  Future<void> _selectDate(BuildContext context, bool isIssueDate) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: isIssueDate
          ? (_issueDate ?? DateTime.now())
          : (_expiryDate ?? DateTime.now()),
      firstDate: DateTime(2000),
      lastDate: DateTime(2100),
    );
    if (picked != null) {
      setState(() {
        if (isIssueDate) {
          _issueDate = picked;
        } else {
          _expiryDate = picked;
        }
      });
    }
  }

  Future<void> _saveCertificate() async {
    if (!_formKey.currentState!.validate()) return;

    // Validate required fields
    if (_certNameController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please enter certificate name')),
      );
      return;
    }

    if (_issuerController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please enter issuer name')),
      );
      return;
    }

    if (_recipientController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please enter recipient name')),
      );
      return;
    }

    if (_selectedType == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please select certificate type')),
      );
      return;
    }

    if (_issueDate == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please select issue date')),
      );
      return;
    }

    // For manual upload, require file
    if (!_isAutoGenerated && _selectedFile == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
            content: Text('Please upload a certificate file or image')),
      );
      return;
    }

    setState(() => _isSaving = true);

    try {
      // Upload file to Firebase Storage
      final firebaseResult = await _certificateService.uploadFileToFirebase(
          _selectedFile!, _filePath!);
      if (firebaseResult == null) {
        throw Exception('Failed to upload file to Firebase Storage');
      }

      // Continue with local save as before
      final description = '''
Certificate: ${_nameController.text}
Issuer: ${_issuerController.text}
Recipient: ${_recipientController.text}
Type: $_selectedType
Issue Date: ${_issueDate?.toString().split(' ')[0] ?? 'Not specified'}
Expiry Date: ${_expiryDate?.toString().split(' ')[0] ?? 'Not specified'}
${_descriptionController.text.isNotEmpty ? 'Notes: $_descriptionController.text' : ''}
      '''
          .trim();

      final certificate = await _certificateService.createCertificate(
        certName: _certNameController.text.trim(),
        issuer: _issuerController.text.trim(),
        recipientName: _recipientController.text.trim(),
        certificateType: _selectedType!,
        issueDate: _issueDate!,
        expiryDate: _expiryDate,
        description: _descriptionController.text.trim().isEmpty
            ? null
            : _descriptionController.text.trim(),
        additionalInfo: _additionalInfoController.text.trim().isEmpty
            ? null
            : _additionalInfoController.text.trim(),
        certificateFile: _selectedFile,
        isAutoGenerated: _isAutoGenerated,
        signature: _signatureController.text.trim().isEmpty
            ? null
            : _signatureController.text.trim(),
        metadata: {
          'formVersion': '1.0',
          'createdVia': 'mobile_app',
        },
      );

      if (certificate != null) {
        final updatedCertificate = certificate.copyWith(
          fileName: _certNameController.text,
          description: description,
        );

        await _certificateService.updateCertificate(updatedCertificate);

        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(
                  'Certificate ${_isAutoGenerated ? 'created' : 'uploaded'} successfully!'),
              backgroundColor: Colors.green,
            ),
          );
          Navigator.pop(context, true);
        }
      } else {
        throw Exception('Failed to save certificate');
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error creating certificate: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isSaving = false);
      }
    }
  }

  @override
  void dispose() {
    _certNameController.dispose();
    _nameController.dispose();
    _issuerController.dispose();
    _recipientController.dispose();
    _descriptionController.dispose();
    _additionalInfoController.dispose();
    _signatureController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Create Certificate'),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Form(
            key: _formKey,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                // Certificate ID Card
                Card(
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          'Certificate ID',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 8),
                        Container(
                          padding: const EdgeInsets.all(12),
                          decoration: BoxDecoration(
                            color: Colors.grey[100],
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: Row(
                            children: [
                              Expanded(
                                child: Text(
                                  _certificateId ?? 'Generating...',
                                  style: const TextStyle(
                                    fontFamily: 'monospace',
                                    fontSize: 14,
                                  ),
                                ),
                              ),
                              IconButton(
                                icon: const Icon(Icons.refresh),
                                onPressed: _generateCertificateId,
                                tooltip: 'Generate new ID',
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 16),

                // Generation Type Selection
                Card(
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          'Certificate Type',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 12),
                        Row(
                          children: [
                            Expanded(
                              child: RadioListTile<bool>(
                                title: const Text('Auto-Generated'),
                                subtitle:
                                    const Text('Create certificate in app'),
                                value: true,
                                groupValue: _isAutoGenerated,
                                onChanged: (value) {
                                  setState(() {
                                    _isAutoGenerated = value!;
                                    if (_isAutoGenerated) {
                                      _selectedFile = null;
                                    }
                                  });
                                },
                              ),
                            ),
                            Expanded(
                              child: RadioListTile<bool>(
                                title: const Text('Manual Upload'),
                                subtitle: const Text('Upload PDF certificate'),
                                value: false,
                                groupValue: _isAutoGenerated,
                                onChanged: (value) {
                                  setState(() {
                                    _isAutoGenerated = value!;
                                  });
                                },
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 16),

                // Certificate Details
                Card(
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          'Certificate Details',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 16),

                        // Certificate Name
                        TextFormField(
                          controller: _certNameController,
                          decoration: const InputDecoration(
                            labelText: 'Certificate Name *',
                            hintText: 'e.g., Advanced Web Development',
                            border: OutlineInputBorder(),
                          ),
                          validator: (value) {
                            if (value == null || value.trim().isEmpty) {
                              return 'Please enter certificate name';
                            }
                            return null;
                          },
                        ),
                        const SizedBox(height: 16),

                        // Issuer
                        TextFormField(
                          controller: _issuerController,
                          decoration: const InputDecoration(
                            labelText: 'Issuer *',
                            hintText: 'e.g., University of Technology',
                            border: OutlineInputBorder(),
                          ),
                          validator: (value) {
                            if (value == null || value.trim().isEmpty) {
                              return 'Please enter issuer name';
                            }
                            return null;
                          },
                        ),
                        const SizedBox(height: 16),

                        // Recipient
                        TextFormField(
                          controller: _recipientController,
                          decoration: const InputDecoration(
                            labelText: 'Recipient Name *',
                            hintText: 'e.g., John Doe',
                            border: OutlineInputBorder(),
                          ),
                          validator: (value) {
                            if (value == null || value.trim().isEmpty) {
                              return 'Please enter recipient name';
                            }
                            return null;
                          },
                        ),
                        const SizedBox(height: 16),

                        // Certificate Type Dropdown
                        DropdownButtonFormField<String>(
                          value: _selectedType,
                          decoration: const InputDecoration(
                            labelText: 'Certificate Type *',
                            border: OutlineInputBorder(),
                          ),
                          items: _certificateTypes.map((type) {
                            return DropdownMenuItem(
                              value: type,
                              child: Text(type),
                            );
                          }).toList(),
                          onChanged: (value) {
                            setState(() {
                              _selectedType = value;
                            });
                          },
                          validator: (value) {
                            if (value == null) {
                              return 'Please select certificate type';
                            }
                            return null;
                          },
                        ),
                        const SizedBox(height: 16),

                        // Issue Date
                        InkWell(
                          onTap: () => _selectDate(context, true),
                          child: InputDecorator(
                            decoration: const InputDecoration(
                              labelText: 'Issue Date *',
                              border: OutlineInputBorder(),
                            ),
                            child: Text(
                              _issueDate != null
                                  ? '${_issueDate!.day}/${_issueDate!.month}/${_issueDate!.year}'
                                  : 'Select date',
                            ),
                          ),
                        ),
                        const SizedBox(height: 16),

                        // Expiry Date (Optional)
                        InkWell(
                          onTap: () => _selectDate(context, false),
                          child: InputDecorator(
                            decoration: const InputDecoration(
                              labelText: 'Expiry Date (Optional)',
                              border: OutlineInputBorder(),
                            ),
                            child: Text(
                              _expiryDate != null
                                  ? '${_expiryDate!.day}/${_expiryDate!.month}/${_expiryDate!.year}'
                                  : 'Select date (optional)',
                            ),
                          ),
                        ),
                        const SizedBox(height: 16),

                        // Description
                        TextFormField(
                          controller: _descriptionController,
                          maxLines: 3,
                          decoration: const InputDecoration(
                            labelText: 'Description (Optional)',
                            hintText: 'Brief description of the certificate',
                            border: OutlineInputBorder(),
                          ),
                        ),
                        const SizedBox(height: 16),

                        // Additional Info
                        TextFormField(
                          controller: _additionalInfoController,
                          maxLines: 3,
                          decoration: const InputDecoration(
                            labelText: 'Additional Information (Optional)',
                            hintText: 'Any additional details or notes',
                            border: OutlineInputBorder(),
                          ),
                        ),
                        const SizedBox(height: 16),

                        // Signature
                        TextFormField(
                          controller: _signatureController,
                          decoration: const InputDecoration(
                            labelText: 'Signature (Optional)',
                            hintText: 'Digital signature or approval signature',
                            border: OutlineInputBorder(),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 16),

                // File Upload Section (for manual upload)
                if (!_isAutoGenerated) ...[
                  Card(
                    child: Padding(
                      padding: const EdgeInsets.all(16.0),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          const Text(
                            'Upload Certificate File or Image',
                            style: TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          const SizedBox(height: 12),
                          const Text(
                            'Supported formats: PDF, JPG, PNG, DOC, DOCX',
                            style: TextStyle(
                              color: Colors.grey,
                              fontSize: 12,
                            ),
                          ),
                          const SizedBox(height: 16),
                          if (_selectedFile != null) ...[
                            Container(
                              padding: const EdgeInsets.all(12),
                              decoration: BoxDecoration(
                                color: Colors.green[50],
                                borderRadius: BorderRadius.circular(8),
                                border: Border.all(color: Colors.green),
                              ),
                              child: Row(
                                children: [
                                  const Icon(Icons.file_present,
                                      color: Colors.green),
                                  const SizedBox(width: 8),
                                  Expanded(
                                    child: Text(
                                      _selectedFile!.path.split('/').last,
                                      style: const TextStyle(
                                          fontWeight: FontWeight.w500),
                                    ),
                                  ),
                                  IconButton(
                                    icon: const Icon(Icons.close),
                                    onPressed: () {
                                      setState(() {
                                        _selectedFile = null;
                                      });
                                    },
                                  ),
                                ],
                              ),
                            ),
                          ] else ...[
                            Row(
                              children: [
                                Expanded(
                                  child: ElevatedButton.icon(
                                    onPressed: _isUploading ? null : _pickFile,
                                    icon: _isUploading
                                        ? const SizedBox(
                                            width: 16,
                                            height: 16,
                                            child: CircularProgressIndicator(
                                                strokeWidth: 2),
                                          )
                                        : const Icon(Icons.upload_file),
                                    label: Text(_isUploading
                                        ? 'Selecting...'
                                        : 'Select File'),
                                    style: ElevatedButton.styleFrom(
                                      padding: const EdgeInsets.symmetric(
                                          vertical: 12),
                                    ),
                                  ),
                                ),
                                const SizedBox(width: 12),
                                Expanded(
                                  child: ElevatedButton.icon(
                                    onPressed: _isUploading ? null : _pickImage,
                                    icon: _isUploading
                                        ? const SizedBox(
                                            width: 16,
                                            height: 16,
                                            child: CircularProgressIndicator(
                                                strokeWidth: 2),
                                          )
                                        : const Icon(Icons.image),
                                    label: Text(_isUploading
                                        ? 'Selecting...'
                                        : 'Pick Image'),
                                    style: ElevatedButton.styleFrom(
                                      padding: const EdgeInsets.symmetric(
                                          vertical: 12),
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ],
                      ),
                    ),
                  ),
                  const SizedBox(height: 16),
                ],

                // Save Button
                ElevatedButton(
                  onPressed: _isSaving ? null : _saveCertificate,
                  style: ElevatedButton.styleFrom(
                    padding: const EdgeInsets.symmetric(vertical: 16),
                    backgroundColor: Theme.of(context).primaryColor,
                    foregroundColor: Colors.white,
                  ),
                  child: _isSaving
                      ? const Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            SizedBox(
                              width: 20,
                              height: 20,
                              child: CircularProgressIndicator(
                                strokeWidth: 2,
                                valueColor:
                                   
                                  AlwaysStoppedAnimation<Color>(Colors.white),
                              ),
                            ),
                            SizedBox(width: 12),
                            Text('Creating Certificate...'),
                          ],
                        )
                      : Text(_isAutoGenerated
                          ? 'Create Certificate'
                          : 'Upload Certificate'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
